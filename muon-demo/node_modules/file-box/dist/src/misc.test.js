#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("blue-tape");
const misc_1 = require("./misc");
test('dataUrl to base64', (t) => __awaiter(this, void 0, void 0, function* () {
    const base64 = [
        'R0lGODlhEAAQAMQAAORHHOVSKudfOulrSOp3WOyDZu6QdvCchPGolfO0o/XBs/fNwfjZ0frl',
        '3/zy7////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
        'ACH5BAkAABAALAAAAAAQABAAAAVVICSOZGlCQAosJ6mu7fiyZeKqNKToQGDsM8hBADgUXoGA',
        'iqhSvp5QAnQKGIgUhwFUYLCVDFCrKUE1lBavAViFIDlTImbKC5Gm2hB0SlBCBMQiB0UjIQA7',
    ].join('');
    const dataUrl = [
        'data:image/png;base64,',
        base64,
    ].join('');
    t.equal(base64, misc_1.dataUrlToBase64(dataUrl), 'should get base64 from dataUrl');
}));
test('httpHeadHeader', (t) => __awaiter(this, void 0, void 0, function* () {
    const URL = 'https://github.com/huan/file-box/archive/v0.6.tar.gz';
    const EXPECTED_HEADERS_KEY = 'content-disposition';
    const EXPECTED_HEADERS_VALUE = 'attachment; filename=file-box-0.6.tar.gz';
    const headers = yield misc_1.httpHeadHeader(URL);
    t.equal(headers[EXPECTED_HEADERS_KEY], EXPECTED_HEADERS_VALUE, 'should get the headers right');
}));
test('httpHeaderToFileName', (t) => __awaiter(this, void 0, void 0, function* () {
    const HEADERS_QUOTATION_MARK = {
        'content-disposition': 'attachment; filename="db-0.0.19.zip"',
    };
    const HEADERS_NO_QUOTATION_MARK = {
        'content-disposition': 'attachment; filename=db-0.0.19.zip',
    };
    const EXPECTED_FILE_NAME = 'db-0.0.19.zip';
    let filename = misc_1.httpHeaderToFileName(HEADERS_QUOTATION_MARK);
    t.equal(filename, EXPECTED_FILE_NAME, 'should get filename with quotation mark');
    filename = misc_1.httpHeaderToFileName(HEADERS_NO_QUOTATION_MARK);
    t.equal(filename, EXPECTED_FILE_NAME, 'should get filename with no quotation mark');
}));
test('httpStream', (t) => __awaiter(this, void 0, void 0, function* () {
    const URL = 'https://httpbin.org/headers';
    const MOL_KEY = 'Mol';
    const MOL_VAL = '42';
    const headers = {};
    headers[MOL_KEY] = MOL_VAL;
    const res = yield misc_1.httpStream(URL, headers);
    const buffer = yield misc_1.streamToBuffer(res);
    const obj = JSON.parse(buffer.toString());
    t.equal(obj.headers[MOL_KEY], MOL_VAL, 'should send the header right');
}));
//# sourceMappingURL=misc.test.js.map