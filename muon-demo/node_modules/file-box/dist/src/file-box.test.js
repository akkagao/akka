#!/usr/bin/env ts-node
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
require("reflect-metadata");
// tslint:disable:no-shadowed-variable
const test = require("blue-tape");
// import * as sinon from 'sinon'
const file_box_1 = require("./file-box");
const requiredMetadataKey = Symbol('required');
const tstest = {
    methodFixture() {
        return function (..._
        // target      : Object,
        // propertyKey : string,
        // descriptor  : PropertyDescriptor,
        ) {
            console.log('@fixture()');
        };
    },
    classFixture() {
        return function (constructor) {
            console.log(constructor.name);
            console.log(constructor.prototype.name);
        };
    },
    parameterFixture() {
        return function (target, propertyKey, parameterIndex) {
            console.log(propertyKey);
            const existingRequiredParameters = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];
            existingRequiredParameters.push(parameterIndex);
            Reflect.defineMetadata(requiredMetadataKey, existingRequiredParameters, target, propertyKey);
        };
    },
};
test('File smoke testing', (t) => __awaiter(this, void 0, void 0, function* () {
    const box = file_box_1.FileBox.fromFile('x');
    t.ok(box);
}));
let FixtureFileBox = class FixtureFileBox {
    static localFileFixutre() {
        return {
            name: 'test.txt',
            type: 'plain/text',
            size: '1',
            content: 'T',
        };
    }
};
__decorate([
    tstest.methodFixture(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FixtureFileBox, "localFileFixutre", null);
FixtureFileBox = __decorate([
    tstest.classFixture()
], FixtureFileBox);
exports.FixtureFileBox = FixtureFileBox;
class TestFileBox {
    static testFileCreateLocal(localFileFixture) {
        const file = file_box_1.FileBox.fromFile(localFileFixture);
        test('File.createLocal()', (t) => __awaiter(this, void 0, void 0, function* () {
            t.ok(file, 'ok');
        }));
        test('File.fromRemote()', (t) => __awaiter(this, void 0, void 0, function* () {
            const URL = 'http://httpbin.org/response-headers?Content-Type=text/plain;%20charset=UTF-8&Content-Disposition=attachment;%20filename%3d%22test.json%22';
            assert(URL);
            t.pass('ok');
        }));
    }
}
__decorate([
    __param(0, tstest.parameterFixture()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TestFileBox, "testFileCreateLocal", null);
exports.TestFileBox = TestFileBox;
test('toBase64()', (t) => __awaiter(this, void 0, void 0, function* () {
    const BASE64_DECODED = 'FileBoxBase64\n';
    const BASE64_ENCODED = 'RmlsZUJveEJhc2U2NAo=';
    const fileBox = file_box_1.FileBox.fromBase64(BASE64_ENCODED, 'test.txt');
    const base64 = yield fileBox.toBase64();
    t.equal(base64, BASE64_ENCODED, 'should get base64 back');
    const text = Buffer.from(base64, 'base64').toString();
    t.equal(text, BASE64_DECODED, 'should get the text right');
}));
test('syncRemoteName()', (t) => __awaiter(this, void 0, void 0, function* () {
    const URL = 'http://httpbin.org/response-headers?Content-Disposition=attachment;%20filename%3d%22test.txt%22&filename=test.txt';
    const EXPECTED_NAME_FROM_URL = 'response-headers?Content-Disposition=attachment;%20filename%3d%22test.txt%22&filename=test.txt';
    const EXPECTED_TYPE_FROM_URL = 'text/plain';
    const EXPECTED_NAME_FROM_HEADER = 'test.txt';
    const EXPECTED_TYPE_FROM_HEADER = 'application/json';
    const fileBox = file_box_1.FileBox.fromUrl(URL);
    t.equal(fileBox.name, EXPECTED_NAME_FROM_URL, 'should get the name from url');
    t.equal(fileBox.mimeType, EXPECTED_TYPE_FROM_URL, 'should get the mime type from url');
    yield fileBox.syncRemoteName();
    t.equal(fileBox.name, EXPECTED_NAME_FROM_HEADER, 'should get the name from remote header');
    t.equal(fileBox.mimeType, EXPECTED_TYPE_FROM_HEADER, 'should get the mime type from remote http header');
}));
test('toDataURL()', (t) => __awaiter(this, void 0, void 0, function* () {
    const FILE_PATH = 'tests/fixtures/hello.txt';
    const EXPECTED_DATA_URL = 'data:text/plain;base64,d29ybGQK';
    const fileBox = file_box_1.FileBox.fromFile(FILE_PATH);
    const dataUrl = yield fileBox.toDataURL();
    t.equal(dataUrl, EXPECTED_DATA_URL, 'should get the data url right');
}));
test('toString()', (t) => __awaiter(this, void 0, void 0, function* () {
    const FILE_PATH = 'tests/fixtures/hello.txt';
    const EXPECT_STRING = 'FileBox#File<hello.txt>';
    const fileBox = file_box_1.FileBox.fromFile(FILE_PATH);
    t.equal(fileBox.toString(), EXPECT_STRING, 'should get the toString() result');
}));
test('toBuffer()', (t) => __awaiter(this, void 0, void 0, function* () {
    const FILE_PATH = 'tests/fixtures/hello.txt';
    const EXPECT_STRING = 'world\n';
    const fileBox = file_box_1.FileBox.fromFile(FILE_PATH);
    const buffer = yield fileBox.toBuffer();
    t.equal(buffer.toString(), EXPECT_STRING, 'should get the toBuffer() result');
}));
test('metadata', (t) => __awaiter(this, void 0, void 0, function* () {
    const FILE_PATH = 'tests/fixtures/hello.txt';
    const EXPECTED_NAME = 'myname';
    const EXPECTED_AGE = 'myage';
    const EXPECTED_MOL = 42;
    // interface MetadataType {
    //   metaname : string,
    //   metaage  : number,
    //   metaobj: {
    //     mol: number,
    //   }
    // }
    const EXPECTED_METADATA = {
        metaname: EXPECTED_NAME,
        metaage: EXPECTED_AGE,
        metaobj: {
            mol: EXPECTED_MOL,
        },
    };
    const fileBox = file_box_1.FileBox.fromFile(FILE_PATH);
    t.deepEqual(fileBox.metadata, {}, 'should get a empty {} if not set');
    t.doesNotThrow(() => {
        fileBox.metadata = EXPECTED_METADATA;
    }, 'should not throw for set metadata for the first time');
    t.throws(() => {
        fileBox.metadata = EXPECTED_METADATA;
    }, 'should throw for set metadata again');
    t.throws(() => {
        fileBox.metadata.mol = EXPECTED_MOL;
    }, 'should throw for change value of a property on metadata');
    t.deepEqual(fileBox.metadata, EXPECTED_METADATA, 'should get the metadata');
}));
//# sourceMappingURL=file-box.test.js.map