/// <reference types="node" />
import * as http from 'http';
import { FileBoxType, FileBoxOptions, Pipeable } from './file-box.type';
export interface Metadata {
    [key: string]: any;
}
export declare class FileBox implements Pipeable {
    /**
     *
     * Static Properties
     *
     */
    /**
     * Alias for `FileBox.fromUrl()`
     *
     * @alias fromUrl()
     */
    static fromUrl(url: string, name?: string, headers?: http.OutgoingHttpHeaders): FileBox;
    /**
     * Alias for `FileBox.fromFile()`
     *
     * @alias fromFile
     */
    static fromFile(path: string, name?: string): FileBox;
    static fromStream(stream: NodeJS.ReadableStream, name: string): FileBox;
    static fromBuffer(buffer: Buffer, name: string): FileBox;
    static fromBase64(base64: string, name: string): FileBox;
    /**
     * dataURL: `data:image/png;base64,${base64Text}`,
     */
    static fromDataURL(dataUrl: string, name: string): FileBox;
    static version(): string;
    /**
     *
     * Instance Properties
     *
     */
    boxType: FileBoxType;
    lastModified: number;
    size: number;
    mimeType?: string;
    name: string;
    _metadata?: Metadata;
    metadata: Metadata;
    /**
     * Lazy load data:
     *  Do not read file to Buffer until there's a consumer.
     */
    private readonly buffer?;
    private readonly remoteUrl?;
    private readonly localPath?;
    private readonly stream?;
    private readonly headers?;
    constructor(fileOrOptions: string | FileBoxOptions);
    version(): string;
    toString(): string;
    toJSON(): string;
    ready(): Promise<void>;
    /**
     * @todo use http.get/gets instead of Request
     */
    syncRemoteName(): Promise<void>;
    pipe<T extends NodeJS.WritableStream>(destination: T): T;
    toStream(): Promise<NodeJS.ReadableStream>;
    /**
     * https://stackoverflow.com/a/16044400/1123955
     */
    private transformBufferToStream;
    private transformFileToStream;
    private transformUrlToStream;
    /**
     * save file
     *
     * @param filePath save file
     */
    toFile(filePath?: string, overwrite?: boolean): Promise<void>;
    toBase64(): Promise<string>;
    /**
     * dataUrl: `data:image/png;base64,${base64Text}',
     */
    toDataURL(): Promise<string>;
    toBuffer(): Promise<Buffer>;
}
export default FileBox;
